{"version":3,"file":"static/js/513.bf561c07.chunk.js","mappings":"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","sources":["components/form/form.js","redux/actions/employeesActions.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addEmployee } from '../../redux/actions/employeesActions';\nimport { Calendar } from 'primereact/calendar';\nimport { Dropdown } from 'primereact/dropdown';\nimport { ModalToast } from '@kospheus/modal-toast';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"primereact/resources/themes/tailwind-light/theme.css\";\nimport './form.css';\n\nfunction EmployeeForm() {\n\n    const dispatch = useDispatch();\n\n    // Hook d'état pour contrôler la visibilité de la notification toast et du message d'erreur\n    const [isToastVisible, setToastVisible] = useState(false);\n    const [isErrorVisible, setErrorVisible] = useState(false);\n\n    //Hook d'état pour gérer les données du formulaire d'employé\n    // Initialise tous les champs à des chaînes vides\n    const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    dateOfBirth: '',\n    startDate: '',\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    department: '',\n    });\n\n    /**\n     * Convertit une date au format ISO 8601 en une chaîne de caractères au format MM/DD/YYYY.\n     * \n     * @param {string} isoDate - La date en format ISO 8601 à convertir.\n     * @returns {string} La date au format MM/DD/YYYY.\n     */\n    function formatDateToMMDDYYYY(isoDate) {\n        const date = new Date(isoDate);\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        const year = date.getFullYear();\n        return `${month}/${day}/${year}`;\n    }\n\n\n    /**\n     * Gère la sauvegarde des données d'employé depuis un formulaire dans la liste des employés et dans le stockage local.\n     * Récupère les valeurs des champs de saisie, les valide, puis met à jour l'état du composant et le stockage local.\n     * Réinitialise également les champs de saisie et affiche une notification.\n     * \n     * @param {event} e - L'objet événement qui a déclenché la fonction.\n     */\n    const handleSave = (e) => {\n\n        e.preventDefault()\n         // Récupération des valeurs des champs du formulaire\n        let inputFirstName = document.querySelector('#first-name').value;\n        let inputLastName = document.querySelector('#last-name').value;\n        let inputDateOfBirth = formatDateToMMDDYYYY(birthDate);\n        let inputStartDate = formatDateToMMDDYYYY(startDate);\n        let inputStreet = document.querySelector('#street').value;\n        let inputCity = document.querySelector('#city').value;\n        let inputState = selectedState ? selectedState.name : '';\n        let inputZipCode = document.querySelector('#zip-code').value;\n        let inputDepartment = selectedDepartment ? selectedDepartment.name : '';\n\n        const newEmployee = {\n            firstName: inputFirstName,\n            lastName: inputLastName,\n            dateOfBirth: inputDateOfBirth,\n            startDate: inputStartDate,\n            street: inputStreet,\n            city: inputCity,\n            state: inputState,\n            zipCode: inputZipCode,\n            department: inputDepartment,\n        };\n\n        // Vérification que tous les champs sont remplis\n        if (\n            inputFirstName &&\n            inputLastName &&\n            inputDateOfBirth &&\n            inputStartDate &&\n            inputStreet &&\n            inputCity &&\n            inputState &&\n            inputZipCode &&\n            inputDepartment \n        ) {\n            console.log('Dispatching:', newEmployee);\n            dispatch(addEmployee(newEmployee));\n\n            // Affichage de la notification toast\n            setToastVisible(true);\n            setErrorVisible(false);\n            // Réinitialisation des données du formulaire et des états liés\n            setFormData({\n                firstName: '',\n                lastName: '',\n                dateOfBirth: '',\n                startDate: '',\n                street: '',\n                city: '',\n                state: '',\n                zipCode: '',\n                department: '',\n            });\n            // Réinitialisation des sélecteurs de date et des sélections de state et de departement\n            setBirthDate(new Date());\n            setStartDate(new Date());\n            setSelectedState(null);\n            setSelectedDepartment(null);\n        } else {\n            setErrorVisible(true);\n        }\n    };\n\n    // Crochets d'état pour les sélections de dates, initialisés à la date actuelle\n    const [startDate, setStartDate] = useState(new Date());\n    const [birthDate, setBirthDate] = useState(new Date());\n\n    // Crochet d'état pour l'état sélectionné avec la valeur par défaut null, et les options d'états correspondantes\n    const [selectedState, setSelectedState] = useState(null)\n    const states = [\n    {\n        \"name\": \"Alabama\",\n        \"abbreviation\": \"AL\"\n    },\n    {\n        \"name\": \"Alaska\",\n        \"abbreviation\": \"AK\"\n    },\n    {\n        \"name\": \"American Samoa\",\n        \"abbreviation\": \"AS\"\n    },\n    {\n        \"name\": \"Arizona\",\n        \"abbreviation\": \"AZ\"\n    },\n    {\n        \"name\": \"Arkansas\",\n        \"abbreviation\": \"AR\"\n    },\n    {\n        \"name\": \"California\",\n        \"abbreviation\": \"CA\"\n    },\n    {\n        \"name\": \"Colorado\",\n        \"abbreviation\": \"CO\"\n    },\n    {\n        \"name\": \"Connecticut\",\n        \"abbreviation\": \"CT\"\n    },\n    {\n        \"name\": \"Delaware\",\n        \"abbreviation\": \"DE\"\n    },\n    {\n        \"name\": \"District Of Columbia\",\n        \"abbreviation\": \"DC\"\n    },\n    {\n        \"name\": \"Federated States Of Micronesia\",\n        \"abbreviation\": \"FM\"\n    },\n    {\n        \"name\": \"Florida\",\n        \"abbreviation\": \"FL\"\n    },\n    {\n        \"name\": \"Georgia\",\n        \"abbreviation\": \"GA\"\n    },\n    {\n        \"name\": \"Guam\",\n        \"abbreviation\": \"GU\"\n    },\n    {\n        \"name\": \"Hawaii\",\n        \"abbreviation\": \"HI\"\n    },\n    {\n        \"name\": \"Idaho\",\n        \"abbreviation\": \"ID\"\n    },\n    {\n        \"name\": \"Illinois\",\n        \"abbreviation\": \"IL\"\n    },\n    {\n        \"name\": \"Indiana\",\n        \"abbreviation\": \"IN\"\n    },\n    {\n        \"name\": \"Iowa\",\n        \"abbreviation\": \"IA\"\n    },\n    {\n        \"name\": \"Kansas\",\n        \"abbreviation\": \"KS\"\n    },\n    {\n        \"name\": \"Kentucky\",\n        \"abbreviation\": \"KY\"\n    },\n    {\n        \"name\": \"Louisiana\",\n        \"abbreviation\": \"LA\"\n    },\n    {\n        \"name\": \"Maine\",\n        \"abbreviation\": \"ME\"\n    },\n    {\n        \"name\": \"Marshall Islands\",\n        \"abbreviation\": \"MH\"\n    },\n    {\n        \"name\": \"Maryland\",\n        \"abbreviation\": \"MD\"\n    },\n    {\n        \"name\": \"Massachusetts\",\n        \"abbreviation\": \"MA\"\n    },\n    {\n        \"name\": \"Michigan\",\n        \"abbreviation\": \"MI\"\n    },\n    {\n        \"name\": \"Minnesota\",\n        \"abbreviation\": \"MN\"\n    },\n    {\n        \"name\": \"Mississippi\",\n        \"abbreviation\": \"MS\"\n    },\n    {\n        \"name\": \"Missouri\",\n        \"abbreviation\": \"MO\"\n    },\n    {\n        \"name\": \"Montana\",\n        \"abbreviation\": \"MT\"\n    },\n    {\n        \"name\": \"Nebraska\",\n        \"abbreviation\": \"NE\"\n    },\n    {\n        \"name\": \"Nevada\",\n        \"abbreviation\": \"NV\"\n    },\n    {\n        \"name\": \"New Hampshire\",\n        \"abbreviation\": \"NH\"\n    },\n    {\n        \"name\": \"New Jersey\",\n        \"abbreviation\": \"NJ\"\n    },\n    {\n        \"name\": \"New Mexico\",\n        \"abbreviation\": \"NM\"\n    },\n    {\n        \"name\": \"New York\",\n        \"abbreviation\": \"NY\"\n    },\n    {\n        \"name\": \"North Carolina\",\n        \"abbreviation\": \"NC\"\n    },\n    {\n        \"name\": \"North Dakota\",\n        \"abbreviation\": \"ND\"\n    },\n    {\n        \"name\": \"Northern Mariana Islands\",\n        \"abbreviation\": \"MP\"\n    },\n    {\n        \"name\": \"Ohio\",\n        \"abbreviation\": \"OH\"\n    },\n    {\n        \"name\": \"Oklahoma\",\n        \"abbreviation\": \"OK\"\n    },\n    {\n        \"name\": \"Oregon\",\n        \"abbreviation\": \"OR\"\n    },\n    {\n        \"name\": \"Palau\",\n        \"abbreviation\": \"PW\"\n    },\n    {\n        \"name\": \"Pennsylvania\",\n        \"abbreviation\": \"PA\"\n    },\n    {\n        \"name\": \"Puerto Rico\",\n        \"abbreviation\": \"PR\"\n    },\n    {\n        \"name\": \"Rhode Island\",\n        \"abbreviation\": \"RI\"\n    },\n    {\n        \"name\": \"South Carolina\",\n        \"abbreviation\": \"SC\"\n    },\n    {\n        \"name\": \"South Dakota\",\n        \"abbreviation\": \"SD\"\n    },\n    {\n        \"name\": \"Tennessee\",\n        \"abbreviation\": \"TN\"\n    },\n    {\n        \"name\": \"Texas\",\n        \"abbreviation\": \"TX\"\n    },\n    {\n        \"name\": \"Utah\",\n        \"abbreviation\": \"UT\"\n    },\n    {\n        \"name\": \"Vermont\",\n        \"abbreviation\": \"VT\"\n    },\n    {\n        \"name\": \"Virgin Islands\",\n        \"abbreviation\": \"VI\"\n    },\n    {\n        \"name\": \"Virginia\",\n        \"abbreviation\": \"VA\"\n    },\n    {\n        \"name\": \"Washington\",\n        \"abbreviation\": \"WA\"\n    },\n    {\n        \"name\": \"West Virginia\",\n        \"abbreviation\": \"WV\"\n    },\n    {\n        \"name\": \"Wisconsin\",\n        \"abbreviation\": \"WI\"\n    },\n    {\n        \"name\": \"Wyoming\",\n        \"abbreviation\": \"WY\"\n    }\n    ];\n\n    // Crochet d'état pour le département sélectionné avec la valeur par défaut null, et les options de départements correspondantes\n    const [selectedDepartment, setSelectedDepartment] = useState(null) \n    const departments = [\n    {\"name\": \"Sales\"},\n    {\"name\": \"Marketing\"},\n    {\"name\": \"Engineering\"},\n    {\"name\": \"Legal\"},\n    ]\n\n    // Objet de style pour les composants déroulants\n    const dropdownStyle = {\n        textAlign: 'left',\n    }\n\n\n\n  return (\n    <>\n        <form onSubmit={handleSave} action=\"#\" id=\"create-employee\">\n            <section className=\"form-title\">\n            <h2 className='title'>Create Employee</h2> \n            </section>\n            <label htmlFor=\"first-name\" className='labels'>First Name</label>\n            <input type=\"text\" id=\"first-name\" className='inputs'\n            value={formData.firstName}\n            onChange={(e) => setFormData({...formData, firstName: e.target.value})} />\n\n            <label htmlFor=\"last-name\" className='labels'>Last Name</label>\n            <input type=\"text\" id=\"last-name\" className='inputs'\n            value={formData.lastName}\n            onChange={(e) => setFormData({...formData, lastName: e.target.value})}/>\n\n            <label htmlFor=\"date-of-birth\" className='labels'>Date of Birth</label>\n            <Calendar \n            showIcon\n            value={birthDate} \n            onChange={(e) => setBirthDate(e.value)}\n            dateFormat=\"dd/mm/yy\"\n            id='date-of-birth'\n            className='calendar-inputs' />\n\n            <label htmlFor=\"start-date\" className='labels'>Start Date</label>\n            <Calendar \n            showIcon\n            value={startDate} \n            onChange={(e) => setStartDate(e.value)}\n            dateFormat=\"dd/mm/yy\"\n            id='start-date'\n            className='calendar-inputs' />\n\n            <fieldset className=\"address\">\n            <legend>Address</legend>\n\n            <label htmlFor=\"street\" className='labels'>Street</label>\n            <input id=\"street\" type=\"text\" className='large-inputs'\n            value={formData.street}\n            onChange={(e) => setFormData({...formData, street: e.target.value})}/>\n\n            <label htmlFor=\"city\" className='labels'>City</label>\n            <input id=\"city\" type=\"text\" className='large-inputs'\n            value={formData.city}\n            onChange={(e) => setFormData({...formData, city: e.target.value})}/>\n\n            <label htmlFor=\"state\" className='labels'>State</label>\n            <Dropdown \n                value={selectedState} \n                onChange={(e) => setSelectedState(e.value)} \n                options={states} optionLabel=\"name\" \n                placeholder=\"Select a State\"\n                style={dropdownStyle}\n                id='state'\n                className=\"large-inputs w-full md:w-14rem\" />\n\n            <label htmlFor=\"zip-code\" className='labels'>Zip Code</label>\n            <input id=\"zip-code\" type=\"number\" className='large-inputs'\n            value={formData.zipCode}\n            onChange={(e) => setFormData({...formData, zipCode: e.target.value})}/>\n            </fieldset>\n\n            <label htmlFor=\"department\" className='labels'>Department</label>\n            <Dropdown \n                value={selectedDepartment} \n                onChange={(e) => setSelectedDepartment(e.value)} \n                options={departments} optionLabel=\"name\" \n                placeholder=\"Select a Department\"\n                style={dropdownStyle}\n                id='department'\n                className=\"large-inputs w-full md:w-14rem\" />\n            <button type=\"submit\" className='button'>Save</button>\n            {isErrorVisible && <div className='error-modal'>\n            <p className='error-message'>Please fill out all fields in the form</p>\n            </div>}\n        </form>\n        {isToastVisible && <ModalToast \n        message=\"Employee added successfully !\" \n        isVisible={isToastVisible} \n        backgroundColor='#199260'\n        timerColor='#7fca00'\n        onClose={() => setToastVisible(false)} />}\n    </>\n  );\n}\n\nexport default EmployeeForm;","/**\n * Action pour ajouter un nouvel employé au store Redux.\n *\n * @param {Object} employee - L'objet représentant un employé avec toutes ses données.\n * @returns {Object} Une action Redux avec le type 'ADD_EMPLOYEE' et l'employé à ajouter comme payload.\n */\nexport const addEmployee = (employee) => {\n    return {\n        type: 'ADD_EMPLOYEE',\n        payload: employee,\n    };\n};"],"names":["dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isToastVisible","setToastVisible","_useState3","_useState4","isErrorVisible","setErrorVisible","_useState5","firstName","lastName","dateOfBirth","startDate","street","city","state","zipCode","department","_useState6","formData","setFormData","formatDateToMMDDYYYY","isoDate","date","Date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","concat","_useState7","_useState8","setStartDate","_useState9","_useState10","birthDate","setBirthDate","_useState11","_useState12","selectedState","setSelectedState","_useState13","_useState14","selectedDepartment","setSelectedDepartment","dropdownStyle","textAlign","_jsxs","_Fragment","children","onSubmit","e","preventDefault","inputFirstName","document","querySelector","value","inputLastName","inputDateOfBirth","inputStartDate","inputStreet","inputCity","inputState","name","inputZipCode","inputDepartment","newEmployee","console","log","type","payload","action","id","_jsx","className","htmlFor","onChange","_objectSpread","target","Calendar","showIcon","dateFormat","Dropdown","options","optionLabel","placeholder","style","ModalToast","message","isVisible","backgroundColor","timerColor","onClose"],"sourceRoot":""}